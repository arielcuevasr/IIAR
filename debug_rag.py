#!/usr/bin/env python3
"""
Script de debug para identificar por qu√© falla la inicializaci√≥n en Streamlit
"""

import streamlit as st
import os
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

st.set_page_config(page_title="Debug RAG", page_icon="üîç")

st.title("üîç Debug del Sistema RAG")

# Mostrar informaci√≥n del entorno
st.subheader("1. Variables de entorno")
api_key = os.getenv("GOOGLE_API_KEY")
st.write(f"- GOOGLE_API_KEY existe: {'‚úÖ' if api_key else '‚ùå'}")
if api_key:
    st.write(f"- Longitud de API key: {len(api_key)}")

# Test de config
st.subheader("2. M√≥dulo config")
try:
    from config import validate_environment, get_environment_config
    valid, errors = validate_environment()
    env_config = get_environment_config()
    
    st.write(f"- Validaci√≥n: {'‚úÖ' if valid else '‚ùå'}")
    if errors:
        st.write(f"- Errores: {errors}")
    st.write(f"- API key en config: {'‚úÖ' if env_config.get('google_api_key') else '‚ùå'}")
except Exception as e:
    st.error(f"Error importando config: {e}")

# Test de RAGSystem
st.subheader("3. RAGSystem")
try:
    from rag_system import RAGSystem
    st.write("‚úÖ RAGSystem importado correctamente")
    
    if st.button("Crear instancia de RAGSystem"):
        with st.spinner("Creando RAGSystem..."):
            try:
                rag = RAGSystem()
                st.success("‚úÖ RAGSystem creado exitosamente!")
                
                # Mostrar estad√≠sticas
                stats = rag.get_database_stats()
                st.json(stats)
                
            except Exception as e:
                st.error(f"‚ùå Error creando RAGSystem: {e}")
                st.exception(e)
                
except Exception as e:
    st.error(f"Error importando RAGSystem: {e}")
    st.exception(e)

# Test de funciones de la app principal
st.subheader("4. Funciones de app.py")
try:
    # Simular las funciones cacheadas
    @st.cache_resource
    def test_create_rag_system():
        try:
            from rag_system import RAGSystem
            return RAGSystem()
        except Exception as e:
            st.error(f"Error en funci√≥n cacheada: {e}")
            return None
    
    if st.button("Test funci√≥n cacheada"):
        with st.spinner("Probando funci√≥n cacheada..."):
            rag = test_create_rag_system()
            if rag:
                st.success("‚úÖ Funci√≥n cacheada funciona!")
            else:
                st.error("‚ùå Funci√≥n cacheada fall√≥")
                
except Exception as e:
    st.error(f"Error en test de funci√≥n cacheada: {e}")
    st.exception(e)